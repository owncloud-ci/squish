ARG BASE=fedora
ARG BASETAG=36

FROM ${BASE}:${BASETAG} as stage-fedora

ENV TZ=Europe/Berlin

LABEL maintainer="https://github.com/owncloud-ci"
LABEL vendor="ownCloud GmbH"
LABEL version="0.1"
LABEL description="minimal Fedora with xfce4, VNC & squish to run GUI tests of the ownCloud desktop client in CI. \
 This container is not maintained nor used by froglogic or the Qt company. \
 It's not intended for public use but purely for CI runs."

RUN yum install -y \
    qt5-qtbase-devel \
    qt5-qttools-devel \
    qt5-qtsvg \
    qtkeychain-qt5-devel \
    libcloudproviders-devel \
    ffmpeg-free \
    wget \
    hostname \
    nautilus-python\
    # to build python3
    openssl-devel \
    cairo-devel \
    gobject-introspection-devel \
    cairo-gobject-devel \
    # cleanup
    && yum autoremove -y \
    && yum clean all

### install Python 3.8 including needed modules
RUN mkdir /python && \
    cd /python && \
    wget -O-  https://www.python.org/ftp/python/3.8.9/Python-3.8.9.tgz | tar xz --strip 1 -C . && \
    ./configure --enable-optimizations --enable-shared --prefix=/usr/local LDFLAGS="-Wl,-rpath /usr/local/lib" && \
    make && \
    sudo make install && \
    cp /python/libpython* /usr/lib && \
    python3.8 -m pip install requests && \
    python3.8 -m pip install pycairo && \
    python3.8 -m pip install PyGObject && \
    rm -rf /python

FROM stage-fedora as stage-xfce

RUN yum install -y \
    tumbler \
    Thunar \
    xfce4-appfinder \
    xfce4-panel \
    xfce4-dev-tools \
    xfce4-session \
    xfce4-settings \
    xfconf \
    xfdesktop \
    xfwm4 \
    dbus-x11 \
    xorg-x11-server-Xorg \
    xorg-x11-xauth \
    langpacks-en \
    xterm \
    # cleanup
    && yum autoremove -y \
    && yum clean all

ENV \
    LANG='en_US.UTF-8' \
    LANGUAGE='en_US:en' \
    LC_ALL='en_US.UTF-8'

FROM stage-xfce as stage-vnc

### Bintray has been deprecated and disabled since 2021-05-01
RUN wget -qO- https://github.com/accetto/tigervnc/releases/download/v1.10.1-mirror/tigervnc-1.10.1.x86_64.tar.gz | tar xz --strip 1 -C /

FROM stage-vnc as stage-novnc

### same parent path as VNC
ENV NO_VNC_HOME=/usr/share/usr/local/share/noVNCdim

### 'python3-numpy' used for websockify/novnc
### ## Use the older version of websockify to prevent hanging connections on offline containers,
### see https://github.com/ConSol/docker-headless-vnc-container/issues/50
### installed into '/usr/share/usr/local/share/noVNCdim'
RUN yum install -y python3-numpy \
    && mkdir -p ${NO_VNC_HOME}/utils/websockify \
    && wget -qO- https://github.com/novnc/noVNC/archive/v1.2.0.tar.gz | tar xz --strip 1 -C ${NO_VNC_HOME} \
    && wget -qO- https://github.com/novnc/websockify/archive/v0.9.0.tar.gz | tar xz --strip 1 -C ${NO_VNC_HOME}/utils/websockify \
    && chmod +x -v ${NO_VNC_HOME}/utils/*.sh \
    ### add 'index.html' for choosing noVNC client
    && echo \
    "<!DOCTYPE html>\n" \
    "<html>\n" \
    "    <head>\n" \
    "        <title>noVNC</title>\n" \
    "        <meta charset=\"utf-8\"/>\n" \
    "    </head>\n" \
    "    <body>\n" \
    "        <p><a href=\"vnc_lite.html\">noVNC Lite Client</a></p>\n" \
    "        <p><a href=\"vnc.html\">noVNC Full Client</a></p>\n" \
    "    </body>\n" \
    "</html>" \
    > ${NO_VNC_HOME}/index.html

FROM stage-novnc as stage-final

# for squish download
ARG S3SECRET
ARG SQUISHVERSION

### download squish
RUN wget https://dl.min.io/client/mc/release/linux-amd64/mc -O /opt/mc && \
    chmod +x /opt/mc && \
    /opt/mc alias set minio https://minio.owncloud.com packages ${S3SECRET} && \
    /opt/mc cp --no-color minio/packages/squish/squish-${SQUISHVERSION}.run /opt/squish.run

### Arguments can be provided during build
ARG ARG_HOME
ARG ARG_VNC_BLACKLIST_THRESHOLD
ARG ARG_VNC_BLACKLIST_TIMEOUT
ARG ARG_VNC_PW
ARG ARG_VNC_RESOLUTION
ARG ARG_SUPPORT_USER_GROUP_OVERRIDE

ENV \
    DISPLAY=:1 \
    HOME=${ARG_HOME:-/home/headless} \
    STARTUPDIR=/dockerstartup \
    VNC_BLACKLIST_THRESHOLD=${ARG_VNC_BLACKLIST_THRESHOLD:-20} \
    VNC_BLACKLIST_TIMEOUT=${ARG_VNC_BLACKLIST_TIMEOUT:-0} \
    VNC_COL_DEPTH=24 \
    VNC_PORT="5901" \
    NO_VNC_PORT="6901" \
    VNC_PW=${ARG_VNC_PW:-secret} \
    VNC_RESOLUTION=${ARG_VNC_RESOLUTION:-1360x768} \
    VNC_VIEW_ONLY=false \
    SUPPORT_USER_GROUP_OVERRIDE=${ARG_SUPPORT_USER_GROUP_OVERRIDE}

### Creates home folder
WORKDIR ${HOME}
SHELL ["/bin/bash", "-c"]

COPY [ "./src/startup", "${STARTUPDIR}/" ]

### Preconfigure Xfce
COPY [ "./src/home/Desktop", "${HOME}/Desktop/" ]
COPY [ "./src/home/config/xfce4", "${HOME}/.config/xfce4/" ]
COPY [ "./src/home/config/autostart", "${HOME}/.config/autostart/" ]

### Create the default application user (non-root, but member of the group zero)
### and make '/etc/passwd' and '/etc/group' writable for the group.
### Providing the build argument ARG_SUPPORT_USER_GROUP_OVERRIDE (set to anything) makes both files
### writable for all users, adding support for user group override (like 'run --user x:y').
RUN \
    chmod 664 /etc/passwd /etc/group \
    && echo "headless:x:1001:0:Default:${HOME}:/bin/bash" >> /etc/passwd \
    # && adduser headless \
    && echo "headless:$VNC_PW" | chpasswd \
    && chmod +x \
        "${STARTUPDIR}/set_user_permissions.sh" \
        "${STARTUPDIR}/generate_container_user.sh" \
        "${STARTUPDIR}/vnc_startup.sh" \
        "${STARTUPDIR}/entrypoint.sh" \
        "/opt/squish.run" \
    && ${ARG_SUPPORT_USER_GROUP_OVERRIDE/*/chmod a+w /etc/passwd /etc/group} \
    && gtk-update-icon-cache -f /usr/share/icons/*

### Fix permissions
RUN "${STARTUPDIR}"/set_user_permissions.sh "${STARTUPDIR}" "${HOME}"

EXPOSE ${VNC_PORT} ${NO_VNC_PORT}

### Switch to default application user (non-root)
USER 1001

ARG ARG_REFRESHED_AT
ARG ARG_VERSION_STICKER

ENV \
    REFRESHED_AT=${ARG_REFRESHED_AT} \
    VERSION_STICKER=${ARG_VERSION_STICKER}

ENTRYPOINT [ "/dockerstartup/entrypoint.sh" ]
