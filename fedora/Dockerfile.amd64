ARG BASE=fedora
ARG BASETAG=42

FROM ${BASE}:${BASETAG} AS stage-build

ARG ARG_CLIENT_BRANCH
ARG ARG_CLIENT_BUILD_TARGET

ENV OWNBUILD_DIR=/ownbuild
ENV CLIENT_BRANCH=${ARG_CLIENT_BRANCH:-master}
ENV CLIENT_BUILD_TARGET=${ARG_CLIENT_BUILD_TARGET:-linux-gcc-x86_64-squish}

RUN dnf install -y \
    git-core \
    cmake \
    ninja-build \
    libEGL-devel \
    gcc \
    gcc-c++ \
    libxkbcommon-devel \
    libxkbcommon-x11-devel \
    xcb-util* \
    patch \
    libxcrypt-compat

RUN curl https://dl.fedoraproject.org/pub/fedora/linux/releases/42/Everything/x86_64/os/Packages/p/python3.10-3.10.16-5.fc42.x86_64.rpm \
    -so python3.10.13.rpm && \
    dnf install -y ./python3.10.13.rpm

RUN mkdir -p ${OWNBUILD_DIR}/${CLIENT_BRANCH} && \
    curl https://raw.githubusercontent.com/owncloud/client/${CLIENT_BRANCH}/.craft.shelf -so ${OWNBUILD_DIR}/.craft.shelf && \
    # remove pinned Qt libraries
    # use what is in the cache
    awk '/^\[libs\/qt/ {skip=1; next} /^\[/ && skip {skip=0} !skip' ${OWNBUILD_DIR}/.craft.shelf > ${OWNBUILD_DIR}/${CLIENT_BRANCH}/.craft.shelf && \
    curl https://raw.githubusercontent.com/owncloud/ownbuild/master/ownbuild.py -so ${OWNBUILD_DIR}/ownbuild.py && \
    python3.10 ${OWNBUILD_DIR}/ownbuild.py \
    --branch ${CLIENT_BRANCH} \
    --target ${CLIENT_BUILD_TARGET} \
    -- \
    --install-deps owncloud-client && \
    # remove unnecessary files
    cd ${OWNBUILD_DIR}/${CLIENT_BRANCH}/${CLIENT_BUILD_TARGET} && \
    mv lib/gettext/hostname dev-utils/bin/hostname && \
    rm -rf build home logs craft translations lib/gettext && \
    find ./ -name 7z* | xargs rm -rf && \
    find ./ -name *doc | xargs rm -rf && \
    find ./ -name *man | xargs rm -rf

FROM ${BASE}:${BASETAG} AS stage-fedora

ARG ARG_CLIENT_BRANCH
ARG ARG_CLIENT_BUILD_TARGET

LABEL maintainer="https://github.com/owncloud-ci"
LABEL vendor="ownCloud GmbH"
LABEL version="0.1"
LABEL description="minimal Fedora with xfce4, VNC & squish to run GUI tests of the ownCloud desktop client in CI. \
    This container is not maintained nor used by froglogic or the Qt company. \
    It's not intended for public use but purely for CI runs."

ENV TZ=Europe/Berlin
ENV LANG=C.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=C.UTF-8

ENV FONTCONFIG_PATH=/etc/fonts
ENV OWNBUILD_DIR=/ownbuild
ENV CLIENT_BRANCH=${ARG_CLIENT_BRANCH:-master}
ENV CLIENT_BUILD_TARGET=${ARG_CLIENT_BUILD_TARGET:-linux-gcc-x86_64-squish}

RUN dnf install -y --setopt=install_weak_deps=False \
    procps-ng \
    # to build client
    libEGL-devel \
    gcc-c++ \
    # for python3 modules
    gobject-introspection-devel \
    cairo-gobject-devel \
    # used in GUI test code
    gdb \
    gnome-keyring \
    nautilus-python \
    # cleanup
    && dnf autoremove -y \
    && dnf clean all \
    && dnf clean dbcache

### install Python 3.10
RUN curl https://dl.fedoraproject.org/pub/fedora/linux/releases/42/Everything/x86_64/os/Packages/p/python3.10-3.10.16-5.fc42.x86_64.rpm \
    -so python3.10.13.rpm && \
    dnf install -y ./python3.10.13.rpm python3.10-devel && \
    ln -s /usr/bin/python3.10 /usr/bin/python && \
    dnf autoremove -y && \
    dnf clean all && \
    dnf clean dbcache && \
    rm ./python3.10.13.rpm && \
    python3.10 -m ensurepip

FROM stage-fedora AS stage-xfce

RUN dnf install -y --setopt=install_weak_deps=False \
    libxkbcommon-x11-devel \
    xcb-util* \
    alsa-lib \
    tumbler \
    Thunar \
    xfce4-appfinder \
    xfce4-panel \
    xfce4-dev-tools \
    xfce4-session \
    xfce4-settings \
    xfconf \
    xfdesktop \
    xfwm4 \
    dbus-x11 \
    xorg-x11-server-Xorg \
    xorg-x11-xauth \
    langpacks-en \
    xterm \
    # vnc server
    tigervnc-server \
    # used for websockify/novnc
    python3-numpy \
    # cleanup
    && dnf autoremove -y \
    && dnf clean all \
    && dnf clean dbcache

### same parent path as VNC
ENV NO_VNC_HOME=/usr/share/usr/local/share/noVNCdim

### Use the older version of websockify to prevent hanging connections on offline containers,
### see https://github.com/ConSol/docker-headless-vnc-container/issues/50
### installed into '/usr/share/usr/local/share/noVNCdim'
RUN mkdir -p ${NO_VNC_HOME}/utils/websockify \
    && curl -sL https://github.com/novnc/noVNC/archive/v1.2.0.tar.gz | tar xz --strip 1 -C ${NO_VNC_HOME} \
    && curl -sL https://github.com/novnc/websockify/archive/v0.9.0.tar.gz | tar xz --strip 1 -C ${NO_VNC_HOME}/utils/websockify \
    && chmod +x -v ${NO_VNC_HOME}/utils/*.sh \
    ### add 'index.html' for choosing noVNC client
    && echo \
    "<!DOCTYPE html>\n" \
    "<html>\n" \
    "    <head>\n" \
    "        <title>noVNC</title>\n" \
    "        <meta charset=\"utf-8\"/>\n" \
    "    </head>\n" \
    "    <body>\n" \
    "        <p><a href=\"vnc_lite.html\">noVNC Lite Client</a></p>\n" \
    "        <p><a href=\"vnc.html\">noVNC Full Client</a></p>\n" \
    "    </body>\n" \
    "</html>" \
    > ${NO_VNC_HOME}/index.html

FROM stage-xfce AS stage-craft

COPY --from=stage-build ${OWNBUILD_DIR}/${CLIENT_BRANCH}/${CLIENT_BUILD_TARGET} ${OWNBUILD_DIR}/${CLIENT_BRANCH}/${CLIENT_BUILD_TARGET}
ENV CMAKE_PREFIX_PATH=${OWNBUILD_DIR}/${CLIENT_BRANCH}/${CLIENT_BUILD_TARGET}
ENV PATH=${OWNBUILD_DIR}/${CLIENT_BRANCH}/${CLIENT_BUILD_TARGET}/dev-utils/bin:$PATH

FROM stage-craft AS stage-final

# for squish download
ARG S3SECRET
ARG SQUISHVERSION

### download squish
RUN curl https://dl.min.io/client/mc/release/linux-amd64/mc -so /opt/mc && \
    chmod +x /opt/mc && \
    /opt/mc alias set minio https://minio.owncloud.com packages ${S3SECRET} && \
    /opt/mc cp --no-color minio/packages/squish/squish-${SQUISHVERSION}.run /opt/squish.run && \
    chmod +x /opt/squish.run

### Arguments can be provided during build
ARG ARG_HOME
ARG ARG_VNC_BLACKLIST_THRESHOLD
ARG ARG_VNC_BLACKLIST_TIMEOUT
ARG ARG_VNC_PW
ARG ARG_VNC_RESOLUTION
ARG ARG_SUPPORT_USER_GROUP_OVERRIDE

ENV \
    DISPLAY=:1 \
    HOME=${ARG_HOME:-/home/headless} \
    STARTUPDIR=/dockerstartup \
    VNC_BLACKLIST_THRESHOLD=${ARG_VNC_BLACKLIST_THRESHOLD:-20} \
    VNC_BLACKLIST_TIMEOUT=${ARG_VNC_BLACKLIST_TIMEOUT:-0} \
    VNC_COL_DEPTH=24 \
    VNC_PORT="5901" \
    NO_VNC_PORT="6901" \
    VNC_PW=${ARG_VNC_PW:-secret} \
    VNC_RESOLUTION=${ARG_VNC_RESOLUTION:-1360x768} \
    VNC_VIEW_ONLY=false \
    SUPPORT_USER_GROUP_OVERRIDE=${ARG_SUPPORT_USER_GROUP_OVERRIDE}

### Creates home folder
WORKDIR ${HOME}
SHELL ["/bin/bash", "-c"]
ENV PATH=$PATH:${HOME}/.local/bin

COPY [ "./src/startup", "${STARTUPDIR}/" ]

### Preconfigure Xfce
COPY [ "./src/home/Desktop", "${HOME}/Desktop/" ]
COPY [ "./src/home/config/xfce4", "${HOME}/.config/xfce4/" ]
COPY [ "./src/home/config/autostart", "${HOME}/.config/autostart/" ]

### Create the default application user (non-root, but member of the group zero)
### and make '/etc/passwd' and '/etc/group' writable for the group.
### Providing the build argument ARG_SUPPORT_USER_GROUP_OVERRIDE (set to anything) makes both files
### writable for all users, adding support for user group override (like 'run --user x:y').
RUN \
    chmod 664 /etc/passwd /etc/group \
    && echo "headless:x:1001:headless" >> /etc/group \
    && echo "headless:x:1001:1001:Default:${HOME}:/bin/bash" >> /etc/passwd \
    && echo "headless:$VNC_PW" | chpasswd \
    && chmod +x \
    "${STARTUPDIR}/set_user_permissions.sh" \
    "${STARTUPDIR}/generate_container_user.sh" \
    "${STARTUPDIR}/vnc_startup.sh" \
    "${STARTUPDIR}/common.sh" \
    "${STARTUPDIR}/entrypoint.sh" \
    # prevent open url errors
    && echo -e '#!/bin/bash\nexit 0' > /usr/bin/xdg-open \
    && chmod +x /usr/bin/xdg-open

RUN ${ARG_SUPPORT_USER_GROUP_OVERRIDE/*/chmod a+w /etc/passwd /etc/group} \
    && gtk-update-icon-cache -f /usr/share/icons/* \
    ### Fix permissions
    && "${STARTUPDIR}"/set_user_permissions.sh "${STARTUPDIR}" "${HOME}"

EXPOSE ${VNC_PORT} ${NO_VNC_PORT}

### Switch to default application user (non-root)
USER 1001

ARG ARG_REFRESHED_AT
ARG ARG_VERSION_STICKER

ENV \
    REFRESHED_AT=${ARG_REFRESHED_AT} \
    VERSION_STICKER=${ARG_VERSION_STICKER}

ENTRYPOINT [ "/dockerstartup/entrypoint.sh" ]
